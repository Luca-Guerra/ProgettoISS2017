System a0

Event sonar : p(Distance, Angle)

Dispatch sonarreached : sonarreached
Dispatch robotstart   : robotstart
Dispatch robotstop    : robotstop

Context ctxBase ip [ host="localhost" port=8079] -g green
EventHandler evh_sonar for sonar -print{ 
	memo currentEvent for console
};

QActor robot context ctxBase{
	Plan init normal
		println("ROBOT: Ready" );
		switchToPlan waitConsoleStart
	
	Plan waitConsoleStart
		println("ROBOT: I'm waiting start msg" );
		/*
		 * Attendo 5 minuti lo start, se non arriva termino il Robot
		 */
		receiveMsg time(300000);
		onMsg robotstart:robotstart -> switchToPlan goStraight else endPlan "ROBOT: finish!";
		repeatPlan
		
	/*		
 	 *  SCENARIO: 		
 	 * 	ID          : Robot go straight on		
 	 * 	DESCRIPTION : The Robot continues in a straight line to the B zone		
 	 */
	Plan goStraight resumeLastPlan
		println("ROBOT: goStraight");
		demo assign(state,gostraight);
		receiveMsg time(1000);
		onMsg sonarreached:sonarreached -> switchToPlan sonarReached;
		onMsg robotstop : robotstop -> switchToPlan stopTheRobot;
		repeatPlan
	
	/*
	 *  SCENARIO: 
	 * 	ID          : Robot Reaches Sonar
	 * 	DESCRIPTION : The Robot reaches the signal emitted by the Sonar
	 */
	Plan sonarReached resumeLastPlan
		demo assign(state,sonarreached);
		println("ROBOT: Stop, Turn Left, Start Blinking, Take Pictures, Send Photo, Stop Blinking, Turn Right, Restart");
		delay time(2000) // simulo il tempo di operazione
	
	Plan stopTheRobot
		println("ROBOT: Stop");
		demo assign(state,stop);
		switchToPlan waitConsoleStart
}

QActor console context ctxBase {
	Rules{
		/*
		 * CONFIGURATION
		 */
		value(robotmove, 0). // stato del robot
		value(nsonars, 1).
	}
	Plan init normal
		actorOp activateGui;
		println("CONSOLE: ready!");
		switchToPlan checkSystemStart
		
	// gestisco lo start	
	Plan checkSystemStart
		// se il robot è in area A inizializzo il sistema
		[ ?? value(area_a, 1) ] switchToPlan initSystem;
		delay time(1000);
		repeatPlan
	
	// gestisco il restart del sistema
	Plan checkRestartSystem resumeLastPlan
		// se il robot è in area A reinizializzo il sistema
		[ ?? value(area_a, 1) ] switchToPlan initSystem
	
	Plan initSystem resumeLastPlan
		demo assign(sonarreached, 0);
		[ ?? value(dist,V)] println("clean");
		// se il robot sta gia' andando avanti lo lascio andare
		[ !? value(robotmove, 0)] forward robot -m robotstart:robotstart;
		[ !? value(robotmove, 0)] demo assign(robotmove, 1);
		switchToPlan senseSonar
		
	Plan senseSonar resumeLastPlan
		[ !? msg( MSGID, MSGTYPE, SENDER, RECEIVER, p(D,A), SEQNUM )] switchToPlan workflow;
		switchToPlan checkRestartSystem;
		repeatPlan
		
	Plan workflow resumeLastPlan	
		[ !? msg( MSGID, MSGTYPE, SENDER, RECEIVER, p(D,A), SEQNUM )] actorOp memoSonarEvent(D, A);
		[ ?? msg( MSGID, MSGTYPE, SENDER, RECEIVER, p(D,A), SEQNUM )] switchToPlan checkSonarReached
	
	/*
	 *  SCENARIO: 
	 * 	ID          : Robot Reaches Sonar
	 * 	DESCRIPTION : The Robot reaches the signal emitted by the Sonar
	 */
	Plan checkSonarReached resumeLastPlan
		actorOp sonarReached;
		[ !? actorOpDone(sonarReached,1)] println("CONSOLE: sonarReached!");
		// per UnitTest
		[ !? actorOpDone(sonarReached,1)] demo assign(state,sonarreached);
		// salvo il sonar raggiunto
		[ !? actorOpDone(sonarReached,1)] demo inc(sonarreached,1,X);
		[ !? actorOpDone(sonarReached,1)] forward robot -m sonarreached:sonarreached;
		[ ?? actorOpDone(sonarReached,1)] switchToPlan checkAreaB
		
	Plan checkAreaB resumeLastPlan
		actorOp inAreaB;
		[ ?? actorOpDone(inAreaB, 1)] switchToPlan stopConsole
		
	Plan stopConsole
		forward robot -m robotstop : robotstop;
		// aggiorno lo stato del robot nella KB
		demo assign(robotmove, 0);
		// per UnitTest
		demo assign(state, finished);
		println("CONSOLE: stop!");
		switchToPlan checkSystemStart
}

QActor sensorsonar context ctxBase  {    
	Rules{
		/* SIMULATION DATA */
		//simulation.	
		p(58,59).p(54,68).p(51,79).p(50,90).p(51,101).
		p(54,112).p(58,121).p(64,129).p(71,135).p(78,140).
		p(86,144).p(94,148).p(103,151).p(112,153).p(121,156).
		p(130,157).p(139,159).p(149,160).p(158,162).
		
		/*
		 * Area A -> p(58,59)
		 * Davanti Sonar -> p(50,90)
		 * Area B -> p(158,162)
		 */
	}	  
 	Plan init normal     
 		println("SONARS: Start");
 		//[ !? simulation ] actorOp connectToSend("anata", "tcp://m2m.eclipse.org:1883", "unibo/mqtt/radar") else endPlan "fail conn MQTT";
 		[ !? simulation ] switchToPlan workSimulate else switchToPlan work;
  		println("SONARS: finish")      
 	Plan workSimulate   resumeLastPlan
  	 	[ !? p(D, A) ] println(p(D, A)); 
  	 	//[ !? p(D, A) ] actorOp sendMsgMqtt("unibo/mqtt/radar","polar","anata", p(D, A)) else endPlan "fail send MQTT";
		[ ?? p(D, A) ] emit sonar : p(D, A);
		delay time(5000);
		repeatPlan 15
	Plan work resumeLastPlan
		repeatPlan
}  