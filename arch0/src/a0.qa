System a0

Event sonar : p(Distance, Angle)

Dispatch sonarreached : sonarreached
Dispatch robotstart:robotstart
Dispatch robotstop : robotstop

Context ctxBase ip [ host="localhost" port=8079] -g green
EventHandler evh_sonar for sonar -print{ 
	memo currentEvent for console
};

QActor robot context ctxBase{
	Plan init normal
		println("ROBOT: Ready" );
		switchToPlan waitConsoleStart
	
	Plan waitConsoleStart
		println("ROBOT: I'm waiting start msg" );
		/*
		 * Attendo 5 minuti lo start, se non arriva termino il Robot
		 */
		receiveMsg time(300000);
		onMsg robotstart:robotstart -> switchToPlan goStraight else endPlan "ROBOT: finish!";
		repeatPlan
		
	/*		
 	 *  SCENARIO: 		
 	 * 	ID          : Robot go straight on		
 	 * 	DESCRIPTION : The Robot continues in a straight line to the B zone		
 	 */
	Plan goStraight resumeLastPlan
		println("ROBOT: goStraight");
		demo assign(state,gostraight);
		receiveMsg time(1000);
		onMsg sonarreached:sonarreached -> switchToPlan sonarReached;
		onMsg robotstop : robotstop -> switchToPlan stopTheRobot;
		repeatPlan
	
	/*
	 *  SCENARIO: 
	 * 	ID          : Robot Reaches Sonar
	 * 	DESCRIPTION : The Robot reaches the signal emitted by the Sonar
	 */
	Plan sonarReached resumeLastPlan
		demo assign(state,sonarreached);
		println("ROBOT: Stop, Turn Left, Start Blinking, Take Pictures, Send Photo, Stop Blinking, Turn Right, Restart");
		delay time(2000) // simulo il tempo di operazione
	
	Plan stopTheRobot
		println("ROBOT: Stop");
		demo assign(state,stop);
		switchToPlan waitConsoleStart
}

QActor console context ctxBase {
	Rules{
		/*
		 * CONFIGURATION
		 */
		value(area_a_angle, 60). // coord AreaA
		value(area_a_dist, 60).
		value(area_b_angle, 160). // coord AreaB
		value(area_b_dist, 150).
		value(robotstart, 0). // il robot è fermo
	}
	Plan init normal
		actorOp activateGui;
		println("CONSOLE: ready!");
		demo assign(noevent,0);
		switchToPlan senseSonar
		
	Plan senseSonar resumeLastPlan
		[ ??msg( MSGID, MSGTYPE, SENDER, RECEIVER, p(D,A), SEQNUM )] actorOp memoSonarEvent(D, A) else demo inc(noevent,1,X);
		/*
		 * If the Console doesn't receive an event from a Sonar stop it self
		 */
		[ !? value(noevent,10)] switchToPlan stopConsole;
		[ !? actorOpDone(memoSonarEvent(D, A),1)] demo assign(noevent,0);
		delay time(1000);
		
		[ ?? actorOpDone(memoSonarEvent(D, A),1)] switchToPlan workflow;
		repeatPlan
	
	Plan workflow resumeLastPlan
		switchToPlan checkAreaA;
		switchToPlan checkAreaB;
		switchToPlan checkSonarReached
	
	Plan checkAreaA resumeLastPlan
		//onEvent sonar: p(D, A) -> actorOp inAreaA;
		// se il robot non e' ancora partito controllo se e' in area A
		[ !? value(robotstart,0)] actorOp inAreaA else endPlan "";
		[ !? actorOpDone(inAreaA,1)] println("CONSOLE: robot in area A!");
		[ !? actorOpDone(inAreaA,1)] forward robot -m robotstart:robotstart;
		[ ?? actorOpDone(inAreaA,1)] demo assign(robotstart, 1)
		
	/*
	 *  SCENARIO: 
	 * 	ID          : RobotReachBZone
	 * 	DESCRIPTION : Robot reaches B zone and stops
	 */
	Plan checkAreaB resumeLastPlan
		// se il robot non sta proseguendo controllo se e' in area B
		[ !? value(robotstart,1)] actorOp inAreaB else endPlan "";
		[ !? actorOpDone(inAreaB,1)] println("CONSOLE: robot in area B!");
		[ !? actorOpDone(inAreaB,1)] forward robot -m robotstop : robotstop;
		[ ?? actorOpDone(inAreaB,1)] demo assign(robotstart, 0)
		
	/*
	 *  SCENARIO: 
	 * 	ID          : Robot Reaches Sonar
	 * 	DESCRIPTION : The Robot reaches the signal emitted by the Sonar
	 */
	Plan checkSonarReached resumeLastPlan
		actorOp sonarReached;
		[ !? actorOpDone(sonarReached,1)] println("CONSOLE: sonarReached!");
		[ !? actorOpDone(sonarReached,1)] demo assign(state,sonarreached);
		[ ?? actorOpDone(sonarReached,1)] forward robot -m sonarreached:sonarreached
		
	Plan stopConsole
		forward robot -m robotstop : robotstop;
		demo assign(state, finished);
		println("CONSOLE: stop!")
}

QActor sensorsonar context ctxBase  {    
	Rules{
		/* SIMULATION DATA */
		//simulation.	
		p(58,59).p(54,68).p(51,79).p(50,90).p(51,101).
		p(54,112).p(58,121).p(64,129).p(71,135).p(78,140).
		p(86,144).p(94,148).p(103,151).p(112,153).p(121,156).
		p(130,157).p(139,159).p(149,160).p(158,162).
		
		/*
		 * Area A -> p(58,59)
		 * Davanti Sonar -> p(50,90)
		 * Area B -> p(158,162)
		 */
	}	  
 	Plan init normal     
 		println("SONARS: Start");
 		[ !? simulation ] switchToPlan workSimulate else switchToPlan work;
  		println("SONARS: finish")      
 	Plan workSimulate   resumeLastPlan
  	 	[ !? p(D, A) ] println(p(D, A)); 
		[ ?? p(D, A) ] emit sonar : p(D, A);
		delay time(5000);
		repeatPlan 15
	Plan work resumeLastPlan
		repeatPlan
}  