System a0

Event sonar : p(Distance, Angle) 

Dispatch sonarreached : sonarreached
Dispatch robotareastart : robotareastart
Dispatch robotareastop : robotareastop

Context ctxBase ip [ host="localhost" port=8079] -g green

QActor sensorsonar context ctxBase  {    
	Rules{
		/* SIMULATION DATA */
		//simulation.	
		p(58,59).p(54,68).p(51,79).p(50,90).p(51,101).
		p(54,112).p(58,121).p(64,129).p(71,135).p(78,140).
		p(86,144).p(94,148).p(103,151).p(112,153).p(121,156).
		p(130,157).p(139,159).p(149,160).p(158,162).
	}	  
 	Plan init normal     
 		println("SONARS: Start");
 		[ !? simulation ] switchToPlan workSimulate else switchToPlan work;
  		println("SONARS: finish")      
 	Plan workSimulate   resumeLastPlan
  	 	[ !? p(D, A) ] println(p(D, A)); 
		[ ?? p(D, A) ] emit sonar : p(D, A);
		delay time(5000);
		repeatPlan 15	
	Plan work resumeLastPlan
		repeatPlan
}  

QActor robot context ctxBase{
	Plan init normal
		println("ROBOT: Ready" );
		switchToPlan waitConsoleStart
	
	Plan waitConsoleStart
		println("ROBOT: I'm waiting start msg" );
		/*
		 * Attendo 10 sec lo start, se non arriva termino il Robot
		 */
		receiveMsg time(10000);
		onMsg robotareastart:robotareastart -> switchToPlan goStraight else endPlan "ROBOT: finish!"
		
	Plan goStraight resumeLastPlan
		println("ROBOT: goStraight");
		receiveMsg time(1000);
		onMsg sonarreached:sonarreached -> switchToPlan sonarReached;
		onMsg robotareastop:robotareastop -> switchToPlan stopTheRobot;
		repeatPlan
		
	Plan sonarReached resumeLastPlan
		demo assign(state,sonarreached);
		println("ROBOT: Stop, Turn Left, Start Blinking, Take Pictures, Send Photo, Stop Blinking, Turn Right, Restart")
	
	Plan thresholdExceeded
		demo assign(state,thresholdexceeded);
		switchToPlan stopTheRobot
	
	Plan stopTheRobot
		println("ROBOT: Stop");
		switchToPlan waitConsoleStart
}